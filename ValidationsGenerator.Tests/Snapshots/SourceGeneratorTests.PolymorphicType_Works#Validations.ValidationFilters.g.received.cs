//HintName: Validations.ValidationFilters.g.cs
// <auto-generated/>
#nullable enable
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Builder;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
public static partial class Validations
{
    public static TBuilder WithValidation<TBuilder>(this TBuilder builder, [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0) where TBuilder : IEndpointConventionBuilder
    {
        builder.AddEndpointFilter(Validations.Map[(filePath, lineNumber)]);
        return builder;
    }
    public static readonly System.Collections.Generic.Dictionary<(string, int), Func<EndpointFilterInvocationContext, EndpointFilterDelegate, ValueTask<object?>>> Map = new()
    {
        [("49b06c30-b4db-4076-8558-3d460f45d292.cs", 19)] = async (EndpointFilterInvocationContext context, EndpointFilterDelegate next) =>
        {
            var results = new List<ValidationResult>();
            var todosIn = context.GetArgument<TodoWithProject>(0);
            Validations.Validate(todosIn, ref results);
            var errors = new Dictionary<string, string[]>();
            foreach (var result in results)
            {
                if (result != ValidationResult.Success)
                {
                    errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                }
            }
            if (errors.Count > 0)
            {
                return Results.ValidationProblem(errors);
            }
            return await next(context);
        },

    };
}
