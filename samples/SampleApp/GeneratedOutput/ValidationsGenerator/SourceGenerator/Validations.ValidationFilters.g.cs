// <auto-generated/>
#nullable enable
using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Builder;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.CompilerServices;
public static partial class Validations
{
    public static TBuilder WithValidation<TBuilder>(this TBuilder builder, [CallerFilePath] string filePath = "", [CallerLineNumber] int lineNumber = 0) where TBuilder : IEndpointConventionBuilder
    {
        builder.AddEndpointFilterFactory(Validations.Map[(filePath, lineNumber)]);
        return builder;
    }
    public static readonly System.Collections.Generic.Dictionary<(string, int), Func<EndpointFilterFactoryContext, EndpointFilterDelegate, EndpointFilterDelegate>> Map = new()
    {
        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 8)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var todo = context.GetArgument<Todo>(0);
                Validations.Validate(todo, ref results);
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 12)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {
            var id_RequiredAttribute = new System.ComponentModel.DataAnnotations.RequiredAttribute();
            var id_RangeAttribute = new System.ComponentModel.DataAnnotations.RangeAttribute(1,2147483647);

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var id = context.GetArgument<int>(0);
                var validationContext = new ValidationContext(id);
                validationContext.MemberName = "id";
                validationContext.DisplayName = "id";
                results.Add(id_RequiredAttribute.GetValidationResult(id, validationContext));
                results.Add(id_RangeAttribute.GetValidationResult(id, validationContext));
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 20)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {
            var id_RequiredAttribute = new System.ComponentModel.DataAnnotations.RequiredAttribute();
            var id_RangeAttribute = new System.ComponentModel.DataAnnotations.RangeAttribute(1,2147483647);

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var id = context.GetArgument<int>(0);
                var validationContext = new ValidationContext(id);
                validationContext.MemberName = "id";
                validationContext.DisplayName = "id";
                results.Add(id_RequiredAttribute.GetValidationResult(id, validationContext));
                results.Add(id_RangeAttribute.GetValidationResult(id, validationContext));
                var todo = context.GetArgument<Todo>(1);
                Validations.Validate(todo, ref results);
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 25)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var todosIn = context.GetArgument<System.Collections.Generic.List<Todo>>(0);
                Validations.Validate(todosIn, ref results);
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 31)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var todosIn = context.GetArgument<TodoWithProject>(0);
                Validations.Validate(todosIn, ref results);
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

        [("/Users/captainsafia/repos/ValidationSourceGenerator/samples/SampleApp/Program.cs", 36)] = (EndpointFilterFactoryContext factoryContext, EndpointFilterDelegate next) =>
        {

            return async (context) =>
            {
                var results = new List<ValidationResult>();
                var todo = context.GetArgument<RecursiveTodo>(0);
                Validations.Validate(todo, ref results);
                var errors = new Dictionary<string, string[]>();
                foreach (var result in results)
                {
                    if (result != ValidationResult.Success)
                    {
                        errors.Add(result.MemberNames.SingleOrDefault(), new[] { result.ErrorMessage });
                    }
                }
                if (errors.Count > 0)
                {
                    return Results.ValidationProblem(errors);
                }
                return await next(context);
            };

        },

    };
}
